//UC 1
const IS_ABSENT=0
let empCheck=Math.floor(Math.random()*10)%2;
if(empCheck==IS_ABSENT){
    console.log("Employee is Absent");
    
    
}else{
    console.log("Employee is present");
}
//UC 2
const IS_PART_TIME=1;
const IS_FULL_TIME=2;
const PART_TIME_HOURS=4;
const FULL_TIME_HOURS=8;
const WAGE_PER_HOUR=20;
let empHrs=0;
empCheck=Math.floor(Math.random()*10) % 3;
switch(empCheck){
    case IS_PART_TIME:
        empHrs=PART_TIME_HOURS;
        break;
    case IS_FULL_TIME:
            empHrs=FULL_TIME_HOURS;
            break;
    default:
        empHrs=0;
}
let empWage=empHrs*WAGE_PER_HOUR;
console.log("Emp Wage: "+empWage);
//UC 3
function getWorkingHours(empCheck){
    switch(empCheck){
        case IS_PART_TIME:
            return PART_TIME_HOURS;
            case IS_FULL_TIME:
                return FULL_TIME_HOURS;
                default:
                    return 0;
    }
}
 empHrs=0;
 empCheck=Math.floor(Math.random()*10) % 3;
empHrs=getWorkingHours(empCheck);
 empWage=empHrs*WAGE_PER_HOUR;
console.log("Emp Wage: "+empWage);

//UC 4
 Num_OF_Working_Days=2;
empHrs=0;
for(let day=0; day<Num_OF_Working_Days;day++){
    let empCheck=Math.floor(Math.random()*10) % 3;
    empHrs +=getWorkingHours(empCheck);
    }
     empWage=empHrs*WAGE_PER_HOUR;
     console.log("Total HRS: " +empHrs+ "Emp Wage: " +empWage);

 //UC 5
      MAX_HRS_IN_MONTH=100;
     NUM_OF_WORKING_DAYS=10;
     let totalEmpHrs=0;
     let totalWorkingDays=0;
     while(totalEmpHrs<=MAX_HRS_IN_MONTH && totalWorkingDays<Num_OF_Working_Days)
     {
         totalWorkingDays++;
         let empCheck=Math.floor(Math.random()*10) % 3;
         totalEmpHrs += getWorkingHours(empCheck);
     }
      empWage=totalEmpHrs*WAGE_PER_HOUR;
     console.log("UC5-Total Days: " + totalWorkingDays+ "Total Hrs: " + totalEmpHrs+ "Emp Wage: " +empWage);

     // UC 6 Arrays
     function calcDailyWage(empHrs)
     {
         return empHrs * WAGE_PER_HOUR;
     }

      MAX_HRS_IN_MONTH=160;
      Num_OF_Working_Days=20;
     let totalempHrs=0;
      totalWorkingDays=0;
       let empDailyWageArr=new Array();
       while(totalEmpHrs<= MAX_HRS_IN_MONTH && totalWorkingDays < Num_OF_Working_Days)
       {
           totalWorkingDays++;
           let empCheck=Math.floor(Math.random()*10) % 3;
           let empHrs=getWorkingHours(empCheck);
           totalEmpHrs += empHrs;
           empDailyWageArr.push(calcDailyWage(empHrs));
       }
      empWage=calcDailyWage(totalempHrs);
     console.log("UC6 - Total Days: " + totalWorkingDays+ " total Hrs: " + totalEmpHrs + "Emp Wage: " + empWage);

// UC 7A - Calc total Wage Using Array forEach traversal or reduce method 
let totalEmpWage=0;
function sum(dailyWage){
    totalEmpWage += dailyWage;
}
empDailyWageArr.forEach(sum);
console.log("UC7A - Total Days: " + totalWorkingDays + " Tptal Hrs: " + totalEmpHrs + "Emp Wage: " + totalEmpWage);

function totalWages(totalWage, dailyWage){
return totalWage + dailyWage;
}
console.log("UC7A - Emp Wage with reduce: " + empDailyWageArr.reduce(totalWages, 0));

// UC 7B-Show the Day along with Daily Wage using Array map helper fuction to
let dailyCntr=0;
function mapDayWithWage(dailyWage){
dailyCntr++;return dailyCntr + "=" + dailyWage;
}
let mapDayWithWageArr=empDailyWageArr.map(mapDayWithWage);
console.log("UC7B - Daily Wage Map");
console.log(mapDayWithWageArr);

// UC 7C-Show the Days when Full time wage of 160 were earned by the
function fulltimeWage(dailyWage){
    return dailyWage.includes("160");
}
let fullDayWageArr = mapDayWithWageArr.filter(fulltimeWage);
console.log("UC7C - Daily Wage Filter When FullTime Wage Earned ");
console.log(fullDayWageArr);

// UC 7D-Find the first occurrence when Full Time Wage earned Using find Functiona
function findFulltimeWage(dailyWage){
    return dailyWage.includes("160");
    }
    console.log("UC7D -First time Fulltime wage was earned on Day " + mapDayWithWageArr.find(findFulltimeWage));

    // UC 7E-Check if Every Element of Full time Wage is truely holdind Full time wage
    function isAllFulltimeWage(dailyWage){
        return dailyWage.includes("160");
    }
    console.log("UC7E -Check All Elements have Full Time Wage :  " + fullDayWageArr.every(isAllFulltimeWage));

    // UC 7F-Check if there is any Part Time Wage 
    function isAnyPartTimeWage(dailyWage){
        return dailyWage.includes("80");
    }
    console.log("UC7F -Check if Any Part Time Wage: " + mapDayWithWageArr.some(isAnyPartTimeWage));

    //UC 7G-Find the number of days the Employee Worked 
    function totalDayWorked(numofDays, dailyWage){
        if(dailyWage > 0)
        return numofDays+1;
        return numofDays;
    }
    console.log("UC7G- Number of days the Employee Worked: " + empDailyWageArr.reduce(totalDayWorked,0));

//UC 6 Arrays and  UC7 Maps UC8

MAX_HRS_IN_MONTH=160;
 Num_OF_Working_Days=20;
totalEmpHrs=0;
 empDailyWageArr=new Array();
let empDailyWageMap=new Map();
function calcDailyWage(empHrs){
    return empHrs*WAGE_PER_HOUR;
}
while(totalEmpHrs<= MAX_HRS_IN_MONTH && totalWorkingDays < Num_OF_Working_Days){
    totalWorkingDays++;
    let empCheck=Math.floor(Math.random()*10) % 3;
    let empHrs=getWorkingHours(empCheck);
    totalEmpHrs+=empHrs;
    empDailyWageArr.push(calcDailyWage(empHrs));
    empDailyWageMap.set(totalWorkingDays, calcDailyWage(empHrs));
}
console.log(empDailyWageMap);
function totalWages(totalWage, dailyWage){
    return totalWage + dailyWage;
}
console.log("UC7A2- Emp Wage Map totalHrs: " + Array.from(empDailyWageMap.values()).reduce(totalWages,0))
    
// UC 9 Arrow Functions

const findTotal=(totalVal, dailyVal) => {
    return totalVal + dailyVal;
}
let count = 0;
let totalHours = Array.from(empDailyHrsMap.values()).reduce(findTotal, 0);
let totalSalary = empDailyWageArr.filter(dailyWage => dailyWage > 0).reduce(findTotal, 0);
console.log("UC9A- Emp Wage With Arrow: " + "Total Hours : " + totalHours + " Total Wages : " + totalSalary);
let nonWorkingDays =new Array();
let partWorkingDays=new Array();
let fullWorkingDays=new Array();
 empDailyHrsMap.forEach((value, key, map) => {
    if(value == 8) fullWorkingDays.push(key);
    else if(value == 4) partWorkingDays.push(key);
    else nonWorkingDays.push(key);
});
console.log("Full Working Days :" +fullWorkingDays);
console.log("Part Working Days :" +partWorkingDays);
console.log("Non Working Days : " +nonWorkingDays);

// UC 10- Object Creation 

 totalEmpHrs =0;
totalWorkingDays=0;
let empDailyHrsAndWageArr=new Array();
while (totalEmpHrs <= MAX_HRS_IN_MONTH && totalWorkingDays < Num_OF_Working_Days){
    totalWorkingDays++;
    let empCheck=Math.floor(Math.random()*10) % 3;
    let empHrs=getWorkingHours(empCheck);
    totalEmpHrs += empHrs;
    empDailyHrsAndWageArr.push(
        {
            dayNum:totalWorkingDays,
            dailyHours:empHrs,
            dailyWage: calcDailyWage(empHrs),
            toString(){
                return '\nDay' + this.dayNum + ' => Working Hours is ' + this.dailyHours + ' And Wage Earned = ' + this.dailyWage
            },
            });
        }
        console.log("UC10- Showing Daily Hours Worked and Wage Earned: " + empDailyHrsAndWageArr);
   
 //UC10A to UC11D Using object Function along with Arrow Function 
 let totalWag = empDailyHrsAndWageArr.filter(dailyHrsAndWage => dailyHrsAndWage.dailyWage>0)
                                     .reduce((totalWage, dailyHrsAndWage) => totalWage += dailyHrsAndWage.dailyWage, 0);
 totalHours = empDailyHrsAndWageArr
              .filter(dailyHrsAndWage => dailyHrsAndWage.dailyWage > 0)
              .reduce((totalHours, dailyHrsAndWage) => totalHours += dailyHrsAndWage.dailyHours, 0);
 console.log("UC 11A Total Hours: " + totalHours + "Total Wages: " +totalWages);
 
 process.stdout.write("UC 11B Logging Full Work Days")
 empDailyHrsAndWageArr.filter(dailyHrsAndWage => dailyHrsAndWage.dailyHours == 8)
                      .forEach(dailyHrsAndWage => process.stdout.write(dailyHrsAndWage.toString()));
 let partWorkingDayStrArr = empDailyHrsAndWageArr
                            .filter(dailyHrsAndWage => dailyHrsAndWage.dailyHours == 4)
                            .map(dailyHrsAndWage => dailyHrsAndWage.toString());
 console.log("\nUC 11C PartWOrkingDayStrings: " + partWorkingDayStrArr);
 
 let nonWorkingDayNums = empDailyHrsAndWageArr
                         .filter(dailyHrsAndWage => dailyHrsAndWage.dailyHours == 0)
                         .map(dailyHrsAndWage => dailyHrsAndWage.dayNum);
 console.log("UC 11D NonWorkingDayNums: " + nonWorkingDayNums);                        

 class EmployeePayrollData {
     //property 
     id;
     salary;

     //constructor
     constructor(id,name,salary){
         this.id = id;
         this.salary = salary;
         this.name = name;
     }

     //getter and setter method
     get name() { return this.name; }
     set name(name) { this._name = name; }

     //method 
     toString() {
          return "id=" + this.id + ", name=" + this.name + ", slary=" + this.salary;

    }
 }

 let employeepayrollData = new EmployeePayrollData(1, "Mark", 30000);
 console.log(employeepayrollData.toString());
 employeepayrollData.name = "john";
 console.log(employeepayrollData.toString());

 class EmployeePayrollData {
     //property
     id;
     salary;
     gender;
     startDate;

     //constructor
      constructor(...params){
          this.id = params[0];
          this.name = params[1];
          this.salary = params[2];
          this.gender = params[3];
          this.startDate = params[4];
      }

      //getter and setter methods 
      get name() { 
          return this.name;
    }
    set name(name){ this._name = name;}

    //method 
    toString() {
        const options = { year: 'numeric', month: 'long', day: 'numeric'};
        const empDate = this.startDate === undefined ? "undefined" : 
                        this.startDate.toLocaleDateString("en_US", options);
        return "id=" + this.id + ", name='" + this.name + ", salary=" + this.salary + "," + "gender=" + this.gender + ", startDate=" + empDate;     

    }
 }

 let employeePayrollData=new EmployeePayrollData(1, "Mark", 30000);
 console.log(employeePayrollData.toString());
 employeePayrollData.name = "John";
 console.log(employeePayrollData.toString());
 let newEmployeePayrollData=new EmployeePayrollData(1, "Terrisa", 30000, "F", new Date());
 console.log(newEmployeePayrollData.toString());